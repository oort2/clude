@RequestMapping("memberDelete")
	public String memberDelete(HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		String login = (String) session.getAttribute("id");
		if(login !=null && !login.equals("")) {
			
			return "/view/member/memberDeleteForm.jsp";  
		} else {
			String msg="로그인이 필요합니다.";
			String url="/member/loginForm";
			
			request.setAttribute("msg", msg);
			request.setAttribute("url", url);
            return "/view/alert.jsp";				}
			}
	
	@RequestMapping("memberDeletePro")
	public String memberDeletePro(HttpServletRequest request, HttpServletResponse response) {
	HttpSession session = request.getSession();
	String login = (String) session.getAttribute("id");
	String pass = request.getParameter("pass");
	String msg="로그인이 필요합니다.";   
	String url="/member/loginForm";
	if(login !=null && !login.equals("")) {	 //로그인상태
		Member member = memberdao.selectOne(login);
		if(member.getPass().equals(pass)) { //패스워드까지 확인
			int num = memberdao.deleteMember(login);  //로그인으로 들어가야함
			if(num>0) {
				msg=member.getName()+"님이 탈퇴처리 되었습니다.";
				session.invalidate(); //logout
				url="/member/loginForm";
			}else {
				msg="회원탈퇴가 실패했습니다.";
				url="/member/memberDeleteForm";			}
			
		}else {
			msg="비밀번호가 틀렸습니다.";
			url="/member/memberUpdateForm";		}				
	}
	request.setAttribute("msg", msg);
	request.setAttribute("url", url);
    return "/view/alert.jsp";	
	}
