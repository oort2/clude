# -*- coding: utf-8 -*-
"""
Created on Wed Apr  5 09:11:16 2023

@author: User
"""


import cv2
import numpy as np
import pickle, gzip, os

from urllib.request import urlretrieve
import matplotlib.pyplot as plt


def load_mnist(filename):
    if not os.path.exists(filename): #존재하지않으면
        link = \
"https://github.com/mnielsen/neural-networks-and-deep-learning/raw/master/data/mnist.pkl.gz"          
        urlretrieve(link,filename) #link에 전달된 파일을 filename으로 저장
        with gzip.open(filename, "rb") as f : #압축파일 읽기
            return pickle.load(f, encoding="latin1")

train_set, valid_set, test_set = load_mnist("mnist.pkl.gz")

#테스트 데이터: 훈련 종료 후 평가를 위한 데이터
#검증데이터: 훈련도중 평가를 위한 데이터
train_data, train_label = train_set #훈련데이터
test_data, test_label = test_set #테스트 데이터
valid_data, valid_label = valid_set #검증데이터
print("train_data[0] =", train_data[0])
print("train_label[0] =", train_label[0])
train_data.shape # (50000, 784)
#           784 : 28*28 => 1차원 배열로 생성
#           50000개의 숫자 이미지값
train_label.shape #(50000,) 정답
test_data.shape  #(10000, 784)
valid_data.shape #(10000, 784) 


#학습하기
knn=cv2.ml.KNearest_create() #KNN알고리즘.
#훈련하기
#train_data: 훈련데이터. 5000ro
#cv2.ml.ROW_SAMPLE : 행값이 데이터. 1개행이 학습 데이터 1개.
#train_label : 정답
knn.train(train_data, cv2.ml.ROW_SAMPLE, train_label)

#예측하기
#test_Data[:100] : 100개만 예측하기.
#k=5 : knn 알고리즘 근접한 5개의 점을 선택.
_, resp, _, _ = knn.findNearest(test_data[:1000], k=5)
resp.shape
train_label.shape
#resp.flatten(): 1차원 배열로 변경.[[값]]
accur = sum(test_label[:1000] == resp.flatten()) /len(resp)
print("정확도=", accur*100, '%')

#이미지 출력하기
def graph_image(data, lable, resp, title, nsample):
    plt.figure(num=title, figsize=(6,9))
    #rand_idx: 0~49999 까지의 수중 24개의 데이터 저장
    rand_idx = np.random.choice(range(data.shape[0]), nsample)
    print(rand_idx)
    for i, id in enumerate(rand_idx) :
        #data[id] : 한개 행. 784ro => 28*28
        img = data[id].reshape(28,28) #2차원 배열로 변경
        plt.subplot(6,4,i+1) #6행 4열 순서. 24개의 이미지 출력
        plt.axis('off') #축을 안보이도록 설정
        plt.imshow(img, cmap ='gray') #이미지 출력
        plt.title('%s: %d-%d' %(title, lable[id], resp[id]))
    plt.tight_layout()

graph_image(test_data[:1000], test_label[:1000], resp, 'predict', 24)


#이미지 파일을 읽어서 학습하기
import numpy as np, cv2
import matplotlib.pyplot as plt
size = (40,40) #이미지 한개의 크기
nclass, nsample = 10,20
train_image=cv2.imread\
    ('images/train_numbers.png', cv2.IMREAD_GRAYSCALE)
train_image.shape
train_image = train_image[5:405, 6:806] #여백제거
train_image.shape

#np.hsplit : 수평 분리. 열로 분리. 20개로 분리
#np.vsplit: 수직분리. 행으로 분리. 10개로 분리.
cells =[np.hsplit(row, nsample) for row in np.vsplit(train_image, nclass)]
print('cells 형태', np.array(cells).shape) #(10,20,40,40)

def find_value_position(img, direct):
    #cv2.reduce: 행축소
    #direct: 0 : 열방향으로 연산하여 1행 축소
    #       1: 행방향으로 1열 축소
    # ravel() : 1차원 배열 변경
    project = cv2.reduce(img, direct, cv2.REDUCE_AVG).ravel()
    print(project.shape)
    
    p0, p1 = -1, -1
    len = project.shape[0]
    for i in range(len):
        if p0 < 0 and project[i] < 250 : p0 = i #숫자시작좌표
        if p1 < 0 and project[len-i-1] < 250 : p1 = len-i-1 #종료좌표
        '''
        if direct == 1
           print(dirext, p0, p1)
        '''
    return p0, p1


#숫자의 좌표값 리턴
def find_number(part): #part: 숫자한개 이미지
    x0, x1 = find_value_position(part, 0)
    y0, y1 = find_value_position(part, 1)
    return part[y0:y1, x0:x1] #숫자 이미지


def place_middle(number, new_size):
    h, w = number.shape[:2]
    big = max(h,w)
    #np.full(size, 값, 자료형):
    #  size의 배열에 값으로 채움. 값의 자료형은 np.float32
    square = np.full((big, big), 255, np.float32)
    #중간 좌표
    dx, dy = np.subtract(big, (w,h))//2
    square[dy:dy+h, dx:dx + w] = number #가운데 숫자를 저장
    #숫자 정보의 데이터를 배열의 가운데에 저장
    #cv2.resize(square, new_size_).flatten()
    #suquare 배열을 new_size 크기로 재지정
    #flatten(): 1차원 배열로 변경
    return cv2.resize(square, new_size).flatten()
    

#np.reshape(cells,(-1,40,40)):
    #cells 배열: (10,20,40,40) 형태
    #=> 변경(-1,40,40) => (200,40,40)
cells[0][0]
cv2.imshow("0,0", cells[0][0]);
cv2.waitKey(0)


nums = [find_number(c) for c in np.reshape(cells,(-1,40,40))]#(200,40,40)
len(nums)
nums[0].shape
nums[0]

#학습데이터 
trainData = np.array([place_middle(n, size) for n in nums])
labels = np.array([i for i in range(nclass)\
                   for j in range(nsample)], np.float32)
print('nums 형태:', np.array(nums).shape)
print('trainData 형태:', trainData.shape) #200*1600 (40행*40열)
print('labels 형태:', labels.shape)
labels[:30]


#알고리즘
knn = cv2.ml.KNearest_create()
#학습하기
knn.train(trainData, cv2.ml.ROW_SAMPLE, labels)

plt.figure(figsize=(10,10))
for i in range(50) : # i = 10
    #00~99: 숫자당 5개씩 데이터를 예측하기
    test_img = cv2.imread('images/num/%d%d.png' %(i/5, i% 5),cv2.IMREAD_GRAYSCALE)
    cv2.threshold(test_img, 128, 255, cv2.THRESH_BINARY)
    num = find_number(test_img) #숫자이미지
    data = place_middle(num, size) #숫자이미지(40,40) 크기에 가운데
    data = data.reshape(1,-1) #1,1600. 테스트 데이터. 테이트이미지
    _, resp, _, _ = knn.findNearest(data, 5) #예측하기  
    plt.subplot(10,5,i+1)
    plt.axis('off')
    plt.imshow(num, cmap='gray')
    plt.title('rest' + str(int(resp[0][0])))
plt.tight_layout()
plt.show()    
    
    
    
    
